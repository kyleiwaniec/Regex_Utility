package edu.mccc.cos210.ds;
public interface Iterator<E>{
	boolean hasNext();
    E next();
    void remove();
}


@Override
	public Iterator<E> iterator() {
		return new MyIterator<E>();
	}
	//iterator inner class:
	public class MyIterator<E>  extends DoublyLinkedList<E>{ 
		public boolean hasNext(){
			//Returns true if the iteration has more elements.
			return super.hasNext();
		}
		public E next(){
			//Returns the next element in the iteration.
			return super.getNext();
		}
		public void remove(){
			//Removes from the underlying collection the last element returned by this iterator (optional operation).
		}
	}

	
//Comparator anonymous class implementation
    public static Comparator<Customer> idComparator = new Comparator<Customer>(){
        @Override
        public int compare(Customer c1, Customer c2) {
            return (int) (c1.getId() - c2.getId());
        }
    };


 public class MyCustomComparator implements Comparator{
  public int compare(Object obj1, Object obj2){
   Person p1 =(Person) obj1;
   Person p2 =(Person) ob2;
   String p1Name = p1.getName()+ " " +p1.getLastName();
   String p2Name = p2.getName()+ " " +p2.getLastName();
   return p1Name.toCompareTo(p2Name);
  }
 }

interface:
int	compare(T o1, T o2)
Compares its two arguments for order.
boolean	equals(Object obj)
Indicates whether some other object is "equal to" this comparator.



An Iterator as an inner class would look like this:

class MyIterable implements Iterable {
    public Iterator iterator() {
        return new Iterator() {
            public boolean hasNext() {...}
            public Object next() {...}
            void remove();
        }
    }
}
In contrast, an Iterator that's not an inner class might look more like:

class MyIterable implements Iterable {
    public Iterator iterator() {
        return new MyIterator();
    }
}

class MyIterator {
    public boolean hasNext() {...}
    public Object next() {...}
    void remove();
}
This is another way that's technically speaking not an inner class, but some people will look at you funny if you say that:

class MyIterable implements Iterable {
    public Iterator iterator() {
        return new MyIterator();
    }

    static class MyIterator {
        public boolean hasNext() {...}
        public Object next() {...}
        void remove();
    }
}








private class MyIcon implements Icon {
            ImageIcon imgIcon1 = null;
            ImageIcon imgIcon2 = null;

            public MyIcon(){
                    try{

                        URL dancing = getClass().getResource("/img/dancingCat.gif");
                        imgIcon2 = new ImageIcon(dancing);

                        URL grumpy = getClass().getResource("/img/grumpycat.jpg");
                        imgIcon1 = new ImageIcon(grumpy);
            
                    }catch(Exception e){
                        e.printStackTrace();
                    }

            }

            @Override
            public void paintIcon(Component c, Graphics g, int x, int y) {
                    if(result){
                        imgIcon2.paintIcon(c, g, x, y);
                    }else{
                        imgIcon1.paintIcon(c, g, x, y);
                    }
               
            }
            @Override
            public int getIconWidth() {
                return 284;
            }

            @Override
            public int getIconHeight() {
                return 426;
            }
        }